#include<bits/stdc++.h>
using namespace std;

// everything is zero indexed
// Complexity: for each query log(n)
// Source: Geeksforgeeks, hackerearth
// GCD(a, b, c) = GCD(a, GCD(b, c)) => queries with associative functions like this might be handled by sparse table

const int N = 100000; // N is the maximum size of original array; this should be changeable
const int K = 16; // K is set to 16 because 2 ^ 17 is greater than 100000 and 2 ^ 16 is not
// If we need to change N, the above relation should be taken into consideration for K

int table[N][K+1];

void buildSparseTable(int arr[], int n)
{
    // GCD of a single element is the element itself
    for (int i = 0; i < n; i++) {
        table[i][0] = arr[i];
    }
    for (int j = 1; j <= K; j++) {
        for (int i = 0; i <= n - (1 << j); i++)
            table[i][j] = __gcd(table[i][j-1], table[i+(1<<(j-1))][j-1]);
    }
}

int query(int L, int R)
{
    int j = (int)log2(R - L + 1);
    return __gcd(table[L][j], table[R-(1<<j)+1][j]);
}

int main()
{
    int a[] = {7, 2, 3, 0, 5, 10, 3, 12, 18};
    int n = sizeof (a) / sizeof (a[0]);
    buildSparseTable(a, n);
    cout << query(0, 2) << endl;
    cout << query(1, 3) << endl;
    cout << query(4, 5) << endl;

    return 0;
}
