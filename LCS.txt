#include<bits/stdc++.h>
using namespace std;

// this prints the length of lcs and prints the lexicographically
// smallest but largest common subsequence.
// str[m+1][n+1] stores the resultant lcs for each i and j.
// make minor changes to get the lexicographically biggest lcs.

void lcs(string X, string Y)
{
    int m = X.size(), n = Y.size();
    int L[m+1][n+1];
    string str[m+1][n+1];
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            if (i == 0 || j == 0)
                L[i][j] = 0;
            else if (X[i-1] == Y[j-1]) {
                L[i][j] = L[i-1][j-1] + 1;
                str[i][j] = str[i-1][j-1];
                str[i][j].push_back(X[i-1]);
            }
            else {
		L[i][j] = max(L[i-1][j], L[i][j-1]);
                if (L[i-1][j] == L[i][j-1]) {
                    if (str[i-1][j] < str[i][j-1]) {
                        str[i][j] = str[i-1][j];
                    }
                    else {
                        str[i][j] = str[i][j-1];
                    }
                }
                else if (L[i-1][j] > L[i][j-1]) {
                    str[i][j] = str[i-1][j];
                }
                else {
                    str[i][j] = str[i][j-1];
                }
            }
        }
    }
    cout << L[m][n] << endl;
    if (L[m][n]) cout << str[m][n] << endl;
    else printf(":)\n");
}

// driver program
int main()
{
    string a, b;
    while (t--) {
        cin >> a;
        cin >> b;
        lcs(a, b);
    }

    return 0;
}
