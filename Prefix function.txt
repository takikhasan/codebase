#include<bits/stdc++.h>
using namespace std;

vector<int> prefix_function (string s) {
    int n = (int) s.length();
    vector<int> pi (n);
    for (int i=1; i<n; ++i) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])  ++j;
        pi[i] = j;
    }
    return pi;
}

vector<int> number_of_occurrences_of_the_prefixes(vector<int> pi)
{
    vector<int> ans(pi.size() + 1);
    for (int i = 0; i < pi.size(); i++) {
        ans[pi[i]]++;
    }
    for (int i = pi.size() - 1; i > 0; i--) {
        ans[pi[i-1]] += ans[i];
    }
    for (int i = 0; i <= pi.size(); i++) {
        ans[i]++;
    }
    return ans;
}

int kmp(string txt, string pat, vector<int> pi)
{
    int match = 0;
    int i = 0, j = 0;
    while (i < txt.size()) {
        if (j == pat.size()) {
            match++;
	    // found pattern at index i - j
            j = pi[j-1];
        }
        else if (txt[i] == pat[j]) {
            i++; j++;
        }
        else {
            if (!j) i++;
            else j = pi[j-1];
        }
    }
    if (j == pat.size()) {
	match++;
	// found pattern at index i - j
    }
    return match;
}

int main()
{
    return 0;
}